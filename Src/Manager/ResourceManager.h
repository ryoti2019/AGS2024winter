#pragma once
#include <map>
#include <string>
#include "Resource.h"

class ResourceManager
{

public:

	// リソース名
	enum class SRC
	{
		TITLE_LOGO,
		TEST_STAGE,
		PLAYER_IDLE,
		PLAYER_ATTACK,
		PLAYER_WALK,
		PLAYER_RUN,
		ENEMY_IDLE,
		ENEMY_ATTACK,
		SWORD,
		//START_LOGO,
		//END_LOGO,
		//ALERT_MSG,
		//LIGHT,
		//SKYDOME,
		//PLAYER_SHIP,
		//LEADER_SHIP,
		//BOSS_SHIP,
		//DUNGEON,
		//SHOT_EXPLOSION,
		//ALPHABET,
		//SPEECH_BALLOON,
		//SHOT_MODEL,
		//TURRET_STAND,
		//TURRET_GUN,
		//ROCK01,
		//ROCK02,
		//JET,
		//BOOST,
		//PLAYER_SHIP_EXPLOSION,
	};

	// 明示的にインステンスを生成する
	static void CreateInstance(void);

	// 静的インスタンスの取得
	static ResourceManager& GetInstance(void);

	// 初期化
	void Init(void);

	// 解放(シーン切替時に一旦解放)
	void Release(void);

	// リソースの完全破棄
	void Destroy(void);

	// リソースのロード
	Resource Load(SRC src);

	// リソースの複製ロード(モデル用)
	int LoadModelDuplicate(SRC src);

private:

	// 静的インスタンス
	static ResourceManager* instance_;

	// リソース管理の対象
	std::map<SRC, Resource> resourcesMap_;

	// 読み込み済みリソース
	std::map<SRC, Resource*> loadedMap_;

	// デフォルトコンストラクタをprivateにして、
	// 外部から生成できない様にする
	ResourceManager(void);

	// デストラクタも同様
	~ResourceManager(void) = default;

	// 内部ロード
	Resource* _Load(SRC src);

};

